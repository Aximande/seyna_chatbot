import streamlit as st
from PIL import Image
import tempfile
import os
from dotenv import load_dotenv
from langchain_community.document_loaders import PyPDFLoader
from langchain.text_splitter import CharacterTextSplitter
from langchain_community.embeddings import OpenAIEmbeddings
from langchain_community.vectorstores import FAISS
from langchain_community.chat_models import ChatOpenAI
from langchain.schema.messages import SystemMessage
from langchain.agents.agent_toolkits import create_conversational_retrieval_agent, create_retriever_tool

# Chargement des variables d'environnement
load_dotenv()
api_key = os.getenv("OPENAI_API_KEY")

def prepare_file(uploaded_file):
    """Pr√©pare le fichier PDF t√©l√©charg√© pour le traitement."""
    with tempfile.NamedTemporaryFile(delete=False, suffix='.pdf') as tmp_file:
        tmp_file.write(uploaded_file.getvalue())
    return tmp_file.name

def create_extraction_agent(file_path):
    """Cr√©e un agent d'extraction bas√© sur le contenu du fichier PDF."""
    loader = PyPDFLoader(file_path)
    documents = loader.load()
    text_splitter = CharacterTextSplitter(chunk_size=1000, chunk_overlap=20)
    texts = text_splitter.split_documents(documents)
    embeddings = OpenAIEmbeddings(openai_api_key=api_key)
    db = FAISS.from_documents(texts, embeddings)
    retriever = db.as_retriever()

    tool = create_retriever_tool(retriever, "search_in_document", "Effectue des recherches et retourne des documents.")

    llm = ChatOpenAI(temperature=0.7, model="gpt-3.5-turbo", openai_api_key=api_key)
    sys_message = SystemMessage(content="En tant qu'assistant IA, je suis sp√©cialis√© dans l'analyse de baux de location pour en extraire des informations cl√©s telles que les noms du bailleur et du locataire, les dates d'effet, les clauses de r√©siliation, les montants de loyer, charges, caution, etc. Je vais identifier et r√©sumer ces informations de mani√®re pr√©cise, tout en assurant la confidentialit√© et l'int√©grit√© des donn√©es.")

    agent_executor = create_conversational_retrieval_agent(llm, [tool], system_message=sys_message, verbose=True)

    return agent_executor

def display_extraction_results(agent, extraction_query):
    """Affiche les r√©sultats d'extraction automatique."""
    response = agent.invoke({"input": extraction_query})
    st.write(response["text"] if "text" in response else response["output"])

# Am√©liorations de l'interface utilisateur
st.set_page_config(page_title="Extracteur d'Infos de Bail", layout="wide")

st.title("üìÑ Extracteur d'Informations de Bail")

st.markdown("""
**Bienvenue sur l'Extracteur d'Informations de Bail**, votre outil privil√©gi√© pour extraire efficacement et pr√©cis√©ment les d√©tails cl√©s des contrats de location.
""")

file = st.file_uploader("T√©l√©chargez le contrat de location (PDF)", type="pdf", help="Seul le format PDF est pris en charge.")

extraction_query = """
Sur la base du PDF du contrat de location fourni, voici les champs √† extraire :

**Identification des parties**
Nom :
adresse :
contact du bailleur :
contact du du locataire :

**Objet du contrat :**
Adresse et description d√©taill√©e du logement, y compris type d'habitat, surface habitable, nombre de pi√®ces, et √©quipements.

**Conditions financi√®res**
Montant du loyer (mensuel):
Contribution pour le partage des √©conomies de charges:
Assurance r√©cup√©rable pour le compte des colocataires:
Montant des charges r√©cup√©rables :
modalit√©s de paiement :
date ou p√©riode de paiement :
d√©p√¥t de garantie :
√©ventuelle contribution pour partage des √©conomies de charges :

**Dur√©e du contrat **
Date de prise d'effet :
dur√©e :
conditions de renouvellement ou de r√©siliation.

**Clauses sp√©cifiques**
Obligations et droits des parties :
conditions d'entretien et de r√©paration :
garanties :
modalit√©s de r√©siliation :

**Annexes**
Diagnostic technique, √©tat des lieux, autorisations pr√©alables, et r√©f√©rences aux loyers habituellement constat√©s.

"""  # Votre question pr√©-d√©finie ici

if file:
    file_path = prepare_file(file)
    agent = create_extraction_agent(file_path)
    display_extraction_results(agent, extraction_query)

    st.header("Questions Suppl√©mentaires sur le Contrat de Location")
    user_question = st.text_area("Posez une question suppl√©mentaire concernant le contrat de location :", height=150)
    if user_question:
        response = agent.invoke({"input": user_question})
        st.session_state["user_response"] = response["text"] if "text" in response else response["output"]
        st.subheader("R√©ponse de l'assistant :")
        st.text_area("", value=st.session_state["user_response"], height=150, disabled=True)
